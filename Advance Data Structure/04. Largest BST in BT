public class BSTLargest {
    public static class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    public static class Info {
        boolean isBST;
        int size;
        int maxValue;
        int minValue;

        Info(Boolean isBST, int size, int minValue, int maxValue) {
            this.isBST = isBST;
            this.size = size;
            this.maxValue = maxValue;
            this.minValue = minValue;
        }
    }

    public static int maxBST = 0;

    public static Info largestBST(Node root) {
        if (root == null) {
            return new Info(true, 0, Integer.MAX_VALUE, Integer.MIN_VALUE);
        }

        Info leftInfo = largestBST(root.left);
        Info rightInfo = largestBST(root.right);
        int size = leftInfo.size + rightInfo.size + 1;
        int min = Math.min(root.data, Math.min(leftInfo.minValue, rightInfo.minValue));
        int max = Math.max(root.data, Math.max(leftInfo.maxValue, rightInfo.maxValue));
        if (root.data <= leftInfo.maxValue || root.data >= rightInfo.minValue) {
            return new Info(false, size, min, max);
        }

        if (leftInfo.isBST && rightInfo.isBST) {
            maxBST = Math.max(maxBST, size);
            return new Info(true, size, min, max);
        }

        return new Info(false, size, min, max);

    }

    public static void main(String args[]) {
        Node root = new Node(50);
        root.left = new Node(30);
        root.right = new Node(60);
        root.left.left = new Node(5);
        root.left.right = new Node(20);
        root.right.left = new Node(45);
        root.right.right = new Node(70);
        root.right.right.left = new Node(65);
        root.right.right.right = new Node(80);
        largestBST(root);

        System.out.println("largest BST in BT will be of size = " + maxBST);
    }
}
