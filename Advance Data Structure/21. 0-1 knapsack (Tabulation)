//GeeksForGeeks Link: https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1

class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
         int dp[][]= new int[n+1][W+1];
         for(int i=0;i<n+1;i++){
             for(int j=0;j<W+1;j++){
                 dp[i][j]=-1;
             }
         }
         for(int i=0;i<n+1;i++){
             dp[i][0]=0;
         }
         for(int i=0;i<dp[0].length;i++){
             dp[0][i]=0;
         }
         
        for(int i=1;i<n+1;i++){
            for(int j=1;j<W+1;j++){
                int v=val[i-1];
                int w=wt[i-1];
                if(w<=j){
                    int ans1=v+dp[i-1][j-w];
                    int ans2=dp[i-1][j];
                    dp[i][j]=Math.max(ans1,ans2);
                }
                else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[n][W];
    } 
}


