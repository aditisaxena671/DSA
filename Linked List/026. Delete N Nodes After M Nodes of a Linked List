//GeeksForGEeks Linl : https://practice.geeksforgeeks.org/problems/delete-n-nodes-after-m-nodes-of-a-linked-list/1

package linkedList;

public class DeleteMNodes {
    public static class Node{
        int data;
        Node next;
        public Node(int data){
            this.data=data;
            this.next=null;
        }
    }
    public static Node head;
    public static Node tail;
    public void addAtLast(int data){
        Node newNode= new Node(data);
        if(head==null){
            head=tail=newNode;
            return;
        }
        tail.next=newNode;
        tail=newNode;
    }
    public static void print(Node head){
        System.out.println("Printing");
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.data+"->");
            temp=temp.next;
        }
        System.out.println();
    }
    public void deletAfterM(int n, int m){
        Node temp=head;
        int i=1;
        while(i<m && temp!=null){
            temp=temp.next;
            i++;
        }
        if(temp==null){
            return;
        }
        int j=0;
        Node temp2=temp.next;
        while(j<n && temp2!=null){
            temp2=temp2.next;
            j++;
        }
        temp.next=temp2;

    }
    public static void main(String args[]){
        DeleteMNodes dll= new DeleteMNodes();
        dll.addAtLast(0);
        dll.addAtLast(1);
        dll.addAtLast(2);
        dll.addAtLast(3);
        dll.addAtLast(4);
        dll.addAtLast(5);
        dll.addAtLast(6);
        dll.addAtLast(7);
        dll.addAtLast(8);
        dll.addAtLast(9);
        dll.addAtLast(10);
        dll.addAtLast(11);

        print(head);
        dll.deletAfterM(4, 2);
        print(head);
    }
}



-----------------------------------------------Gfg solution ----------------------------------------------------------------------

class Solution
{
    static void linkdelete(Node head, int M, int N)
    {
        // your code here
        Node curr=head;
        Node temp=null;
        int count;
        while(curr!=null){
            for(count=1;count<M && curr!=null;count++){
                if(curr!=null){
                    curr=curr.next;
                }
            }
            if(curr==null){
                return;
            }
            temp=curr.next;
            for(count=1;count<=N && temp!=null;count++){
                if(temp!=null){
                    temp=temp.next;
                }
            }
            curr.next=temp;
            curr=temp;
        }
    }
}
